#textdomain wesnoth-NX-RPG

##
# Establishes a new timed unit respawn point. This can only be used in
# events.
#
# Example:
#   {TIMED_SPAWNER 4 (type=Shaxthal Assault Drone,Shaxthal Sentry Drone) 2 42 10}
#
# If you specify a comma-separated list of unit types in the UNIT_WML
# block, the spawn type will be randomized every cycle.
#
# A respawn interval of 0 turns will cause units to respawn immediately
# after being killed.
##
#define TIMED_SPAWNER _RESPAWN_TURNS _UNIT_WML _SIDE_NUMBER _X _Y
    [event]
        name="prestart,respawn:S{_SIDE_NUMBER}X{_X}Y{_Y}"
        first_time_only=no
        {SPAWNER_BASE ({_RESPAWN_TURNS}) ({_UNIT_WML}) ({_SIDE_NUMBER}) ({_X}) ({_Y}) (yes) (no) ()}
    [/event]
#enddef

#define RANDOM_TIMED_SPAWNER _RESPAWN_TURNS _UNIT_WML _SIDE_NUMBER _X _Y _FORMULA
    [event]
        name="prestart,respawn:S{_SIDE_NUMBER}X{_X}Y{_Y}"
        first_time_only=no
        {SPAWNER_BASE ({_RESPAWN_TURNS}) ({_UNIT_WML}) ({_SIDE_NUMBER}) ({_X}) ({_Y}) (yes) (yes) ({_FORMULA})}
    [/event]
#enddef

##
# Establishes a new one-time respawn point. This can only be used in
# events.
#
# Example:
#   {ONETIME_SPAWNER (type=Shaxthal War Drone,Shaxthal Enforcer Drone) 5 31 42}
#
# If you specify a comma-separated list of unit types in the UNIT_WML
# block, the spawn type will be randomized every cycle.
##
#define ONETIME_SPAWNER _UNIT_WML _SIDE_NUMBER _X _Y
    [event]
        name="prestart,respawn:S{_SIDE_NUMBER}X{_X}Y{_Y}"
        first_time_only=no
        {SPAWNER_BASE (0) ({_UNIT_WML}) ({_SIDE_NUMBER}) ({_X}) ({_Y}) (no) (no) ()}
    [/event]
#enddef

#define RANDOM_ONETIME_SPAWNER _RESPAWN_TURNS _UNIT_WML _SIDE_NUMBER _X _Y _FORMULA
    [event]
        name="prestart,respawn:S{_SIDE_NUMBER}X{_X}Y{_Y}"
        first_time_only=no
        {SPAWNER_BASE (0) ({_UNIT_WML}) ({_SIDE_NUMBER}) ({_X}) ({_Y}) (no) (yes) ({_FORMULA})}
    [/event]
#enddef

##
# This is the main spawner logic. This macro must be present somewhere in
# the scenario at top level, preferably right before the first spawner
# macro inclusion.
#
# It is possible to disable all spawners in a scenario by setting the
# variable spawner_controller_enabled to a false boolean value. This is
# initially set to true.
##
#define DEATH_SPAWNER_CONTROLLER
    [event]
        name=prestart
        {VARIABLE spawner_controller_enabled yes}
        {VARIABLE spawn_turn 0}
    [/event]
    [event]
        name=victory
        {CLEAR_VARIABLE spawner_controller_enabled}
    [/event]
    [event]
        name=die
        first_time_only=no
        [filter_condition]
            {VARIABLE_BOOLEAN_EQUALS spawner_controller_enabled yes}
        [/filter_condition]
        [filter]
            [filter_wml]
                [variables]
                    spawner_respawn=yes
                [/variables]
            [/filter_wml]
        [/filter]

        [if]
            {VARIABLE_NUMERICAL_LESS_THAN_OR_EQUAL unit.variables.spawner_turns 0}
            [then]
                {LOG_NX ("<SPAWN_CONTROLLER> fire '$unit.variables.spawner_event' now")}

                [kill]
                    x,y=$x1,$y1
                    fire_event=no
                    animate=no
                [/kill]

                [fire_event]
                    name="$unit.variables.spawner_event"
                [/fire_event]
            [/then]
            [else]
                [set_variables]
                    name="temp_spawner_event_store"
                    mode="replace"
                    [value]
                        name="turn $($turn_number + $unit.variables.spawner_turns)"
                        first_time_only="yes"
                        [fire_event]
                            name="$unit.variables.spawner_event"
                        [/fire_event]
                    [/value]
                [/set_variables]

                {LOG_NX ("<SPAWN_CONTROLLER> fire '$unit.variables.spawner_event' on turn $($turn_number + $unit.variables.spawner_turns)")}

                [insert_tag]
                    name="event"
                    variable="temp_spawner_event_store"
                [/insert_tag]

                {CLEAR_VARIABLE temp_spawner_event_store}
            [/else]
        [/if]
    [/event]
#enddef

#define CONTINUOUS_SPAWNER _SIDE_NUMBER _UNIT_WML _X _Y _TURN_CONDITION
    [event]
        name=side_{_SIDE_NUMBER}_turn
        [if]
            {VARIABLE_NUMERICAL_EQUALS this_turn {_TURN_CONDITION}}
            [then]
                {SPAWNER_BASE (0) ({_UNIT_WML}) ({_SIDE_NUMBER}) ({_X}) ({_Y}) (no) (no) ()}

                {VARIABLE spawn_turn {_TURN_CONDITIONAL}}
            [/then]
        [/if]
    [/event]
#enddef

# Implementation detail. Use TIMED_SPAWNER and ONE_TIME_SPAWNER instead.
#define SPAWNER_BASE _RESPAWN_TURNS _UNIT_WML _SIDE_NUMBER _X _Y _DO_RESPAWN _DO_RANDOM _RAND_FORMULA
    [set_variables]
        name=temp_spawner_store
        mode=replace
        [value]
            {_UNIT_WML}

            side={_SIDE_NUMBER}
            x={_X}
            y={_Y}

            generate_name=yes
            random_traits=yes

            upkeep=free

            [variables]
                spawner_respawn={_DO_RESPAWN}
                spawner_event="respawn:S{_SIDE_NUMBER}X{_X}Y{_Y}"
                spawner_turns={_RESPAWN_TURNS}
                spawner_do_rand={_DO_RANDOM}
            [/variables]
        [/value]
    [/set_variables]

    [if]
        {VARIABLE_BOOLEAN_EQUALS temp_spawner_store.variables.spawner_respawn yes}
        [then]
            {VARIABLE_RANDOM temp_spawn_only_once_random               0..100}
            {VARIABLE_RANDOM temp_spawn_only_once_random_control_value 23,33,41,73}
            {VARIABLE_OP temp_spawn_only_once_random modulo $temp_spawn_only_once_random_control_value}

            [if]
                {VARIABLE_NUMERICAL_EQUALS temp_spawn_only_once_random 0}
                [then]
                    {VARIABLE temp_spawner_store.variables.spawner_respawn no}
                [/then]
            [/if]

            {CLEAR_VARIABLE temp_spawn_only_once_random,temp_spawn_only_once_random_control_value}
        [/then]
    [/if]

    [if]
        {VARIABLE_BOOLEAN_EQUALS temp_spawner_store.variables.spawner_do_rand yes}
        [then]
            [store_locations]
                variable=spawner_random_locs
                x={_X}
                y={_Y}
                {_RAND_FORMULA}
            [/store_locations]

            {VARIABLE_OP rand_index rand "1..$($spawner_random_locs.length| - 1)"}

            {VARIABLE temp_spawner_store.x $spawner_random_locs[$rand_index].x}
            {VARIABLE temp_spawner_store.y $spawner_random_locs[$rand_index].y}

            #{CLEAR_VARIABLE spawner_random_locs,rand_index}

            {LOG_NX ( _ "Spawn location randomly calculated")}
        [/then]
    [/if]

    {VARIABLE_RANDOM temp_spawner_store.type $temp_spawner_store.type}
    {VARIABLE_RANDOM temp_spawner_store.facing n,ne,nw,s,se,sw}

        # wmlindent: start ignoring
        {LOG_NX (
            "<SPAWNER_BASE> respawn S: $temp_spawner_store.side X: $temp_spawner_store.x Y: $temp_spawner_store.y " +
            "T: '$temp_spawner_store.type' F: $temp_spawner_store.facing R: $temp_spawner_store.variables.spawner_respawn")
        }
        # wmlindent: stop ignoring

    [unstore_unit]
        find_vacant=yes
        variable=temp_spawner_store
    [/unstore_unit]

    {CLEAR_VARIABLE temp_spawner_store}
#enddef

# kate: indent-mode normal; encoding utf-8; space-indent on;
